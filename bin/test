#!/bin/bash
TEST="$(stat -f "${BASH_SOURCE[0]}")"

set -e
set -m

function run_selftest() {
  npm ci
  npm t
}

function run_prod_only_startup_js() {
  tmp=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')
  cargo run -- "$tmp" --force --silent

  echo 'running the server'
  cd "$tmp"
  npm ci --only=production

  cat >> handlers.js <<EOF

exit.route = 'GET /exit'
function exit() {
  setTimeout(() => process.exit(), 100)
}
module.exports.exit = exit
EOF

  NODE_ENV=production PORT=8080 ./boltzmann.js --startup &

  sleep 2 # ha ha ha ha ha
  echo 'attempting to curl'
  result=$(curl -sL http://127.0.0.1:8080/hello/world)

  echo 'stopping the server'
  curl -sL http://127.0.0.1:8080/exit &>/dev/null

  if [ "$result" != "hello world" ]; then
    echo -e "expected \"hello world\", got \"$result\""
    exit 1
  fi
  cd -
  rm -rf "$tmp"
}

function run_prod_only_startup_ts() {
  tmp=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')
  cargo run -- "$tmp" -vv --typescript --force

  echo 'running the server'
  cd "$tmp"
  npm ci --only=production
  cd target/release

  cat >> handlers.js <<EOF

exit.route = 'GET /exit'
function exit() {
  setTimeout(() => process.exit(), 100)
}
module.exports.exit = exit
EOF
  NODE_ENV=production PORT=8080 node ./boltzmann.js --startup &

  sleep 4 # ha ha ha ha ha
  echo 'attempting to curl'
  result=$(curl -sL http://127.0.0.1:8080/hello/world)

  echo 'stopping the server'
  curl -sL http://127.0.0.1:8080/exit &>/dev/null

  if [ "$result" != "hello world" ]; then
    echo -e "expected \"hello world\", got \"$result\""
    exit 1
  fi
  cd -
  rm -rf "$tmp"
}

function run_prod_only_build_ts() {
  tmp=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')

  echo "$tmp"
  cargo run -- "$tmp" --all --typescript --force -vvv

  echo 'running the server'
  cd "$tmp"
  npm ci --only=production

  npm run boltzmann:tsbuild
  cd -

  rm -rf "$tmp"
}

function run_startup() {
  tmp=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')
  cargo run -- "$tmp" --force --silent

  echo 'running the server'
  cd "$tmp"
  PORT=8080 ./boltzmann.js --startup &

  sleep 2 # ha ha ha ha ha
  echo 'attempting to curl'
  result=$(curl -sL http://127.0.0.1:8080/hello/world)

  echo 'stopping the server'
  kill %1
  wait

  if [ "$result" != "hello world" ]; then
    echo -e "expected \"hello world\", got \"$result\""
    exit 1
  fi
  cd -

  rm -rf "$tmp"
}

function run_examples() {
  for example in examples/*; do
    if [ "$example" = "examples/sessions" ]; then
      continue
    fi

    echo "--------------------- example $example start"
    pushd $example
    cargo run -- . --force -vv --githubci=off

    echo "testing $example startup"
    PORT=8080 ./boltzmann.js &
    kill %1
    wait

    echo "testing $example startup"
    npm t # this may trigger docker-compose up

    if [ -e ./docker-compose.yml ]; then
      docker-compose down || echo 'no docker detected'
    fi

    popd
    git checkout $example
    git clean -f -q $example
  done
}

function list_tests() {
  typeset -f          | \
    grep '()'         | \
    grep 'run_*'      | \
    grep -v 'run_all' | \
    awk '{print $1}'  | \
    sort              | \
    sed -e 's/run_//g'
}

function run_all() {
  for test in $(list_tests); do
    echo "======================== $test start"
    result=0
    $TEST $test || result=1
    if [ $result -eq 1 ]; then
      echo "======================== $test failed!"
      exit 1
    fi
  done
}

case $1 in
  "prod_only_build_ts")
    run_prod_only_build_ts
  ;;
  "prod_only_startup_ts")
    run_prod_only_startup_ts
  ;;
  "prod_only_startup_js")
    run_prod_only_startup_js
  ;;
  "selftest")
    run_selftest
  ;;
  "startup")
    run_startup
  ;;
  "examples")
    run_examples
  ;;
  "list")
    list_tests
  ;;
  "")
    run_all
  ;;
  *)
  ;;
esac
