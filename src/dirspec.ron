Dir(DirSpec(
  children: [
    ("boltzmann.js", 0o755, Template(TemplateSpec(
      template_name: "boltzmann-js/index.tera"
    )), Some(When(
      none_of: ["typescript"],
    ))),

    ("boltzmann.ts", 0o755, Template(TemplateSpec(
      template_name: "boltzmann/index.tera"
    )), Some(When(
      all_of: ["typescript"],
    ))),

    ("handlers.js", 0o644, Template(TemplateSpec(
      template_name: "handlers_cjs.js"
    )), Some(When(
      none_of: ["typescript"],
      if_not_present: ["handlers.js", "handlers"]
    ))),

    ("handlers.ts", 0o644, Template(TemplateSpec(
      template_name: "handlers.ts"
    )), Some(When(
      all_of: ["typescript"],
      if_not_present: ["handlers.js", "handlers", "handlers.ts"]
    ))),

    ("middleware.js", 0o644, Template(TemplateSpec(
      template_name: "middleware_cjs.js",
    )), Some(When(
      none_of: ["typescript"],
      if_not_present: ["middleware.js", "middleware"]
    ))),

    ("middleware.ts", 0o644, Template(TemplateSpec(
      template_name: "middleware.ts",
    )), Some(When(
      all_of: ["typescript"],
      if_not_present: ["middleware.js", "middleware", "middleware.ts"]
    ))),

    ("tsconfig.json", 0o644, Template(TemplateSpec(
      template_name: "tsconfig.json",
    )), Some(When(
      all_of: ["typescript"],
      if_not_present: ["tsconfig.json"]
    ))),

    ("nodemon.json", 0o644, Template(TemplateSpec(
      template_name: "nodemon.json",
    )), Some(When(
      if_not_present: ["nodemon.json"]
    ))),

    ("templates", 0o755, Dir(DirSpec(
      children: [
            ("index.html", 0o644, Template(TemplateSpec(
              template_name: "index.html"
            )), None)
      ],
    )), Some(When(
      all_of: ["templates"],
      if_not_present: [ "templates/index.html"]
    ))),

    ("client", 0o755, Dir(DirSpec(
      children: [
            ("greeting.js", 0o644, Template(TemplateSpec(
              template_name: "greeting.js"
            )), None)
      ],
    )), Some(When(
      all_of: ["staticfiles"],
      if_not_present: [ "client/greeting.js"]
    ))),

    (".eslintrc.js", 0o644, Template(TemplateSpec(
      template_name: "eslintrc.js"
    )), Some(When(
      if_not_present: [".eslintrc.js", ".eslintrc"],
    ))),

    (".prettierrc.js", 0o644, Template(TemplateSpec(
      template_name: "prettierrc.js"
    )), Some(When(
      if_not_present: [".prettierrc.js", ".prettierrc" ],
    ))),

    (".github", 0o755, Dir(DirSpec(
      children: [
        ("workflows", 0o755, Dir(DirSpec(
          children: [
            ("test.yml", 0o644, Template(TemplateSpec(
              template_name: "github-action-test.yml"
            )), None)
          ]
        )), None)
      ]
    )), Some(When(
      all_of: ["githubci"],
    ))),

    // jumper module for selftest, to trick tap into
    // reporting test coverage output for boltzmann.js
    ("test.js", 0o644, Template(TemplateSpec(
      template_name: "selftest.js",
    )), Some(When(
      all_of: ["selftest"],
    ))),

    ("types", 0o755, Dir(DirSpec(
        children: [
            ("are-we-dev.d.ts", 0o644, File(FileSpec(
                contents:
r#"declare module 'are-we-dev' {
  interface IsDev {
    (): boolean
  }

  declare const isDev: IsDev;
  export = isDev;
}"#
            )), None),

            ("culture-ships.d.ts", 0o644, File(FileSpec(
                contents:
r#"declare module 'culture-ships' {
  interface Ships {
    ships: string[],
    random(): string
  }

  declare const ships: Ships;
  export = ships;
}"#
            )), None),

            ("entropic__bole.d.ts", 0o644, File(FileSpec(
                contents:
r#"declare module '@entropic/bole' {
  interface Bole {
    (name: string): Bole;
    output(...config: any[]): void;
    info(...args: any[]): void;
    debug(...args: any[]): void;
    error(...args: any[]): void;
    warn(...args: any[]): void;
  }

  declare const bole: Bole;
  export = bole;
}"#
            )), None),

            ("honeycomb-beeline.d.ts", 0o644, File(FileSpec(
                contents:
r#"declare module 'honeycomb-beeline' {
  interface Fn {
    (...args: any[]): any
  }

  interface Beeline {
    (config: Record<string, unknown>): void
    startSpan: (opts?: Record<string, unknown>) => string
    unmarshalTraceContext(string): any
    finishSpan: (_: string) => void
    startTrace: (opts?: Record<string, unknown>, _?: string, _?: string, _?: string) => string
    finishTrace: (_: string) => void
    bindFunctionToTrace<T extends Fn>(...args: Parameters<T>): ReturnType<T>
    addContext: (opts?: Record<string, unknown>) => void
  }

  declare const beeline: Beeline;
  export = beeline;
}"#
            )), Some(When(all_of: ["honeycomb"]))),
        ]
    )), Some(When(all_of: ["typescript"]))),

    ("tests", 0o755, Dir(DirSpec(
        children: [
            ("00-example.js", 0o644, Template(TemplateSpec(
              template_name: "test.js",
            )), Some(When(
              none_of: ["typescript"],
            ))),

            ("00-example.ts", 0o644, Template(TemplateSpec(
              template_name: "test.ts",
            )), Some(When(
              all_of: ["typescript"],
            )))
        ]
    )), Some(When(
      if_not_present: ["tests"],
      none_of: ["selftest"]
    ))),
  ],
))
